from telebot import TeleBot, types
from logic import DB_Manager
from config import *
import sqlite3

bot = TeleBot(token)
manager = DB_Manager(database)
ADMIN_ID = admin_id  
user_states = {}

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"))
    markup.add(types.KeyboardButton("–ù–∞—à–µ–ª –æ—à–∏–±–∫—É"))
    return markup

def create_questions_keyboard():
    questions = manager.get_all_questions()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for question in questions:
        markup.add(types.KeyboardButton(question))
    markup.add(types.KeyboardButton("–î—Ä—É–≥–æ–µ")) 
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    return markup

@bot.message_handler(commands=['start', 'help'])
def start_command(message):
    user_states[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
def show_questions(message):
    user_states[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–î—Ä—É–≥–æ–µ' –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=create_questions_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–î—Ä—É–≥–æ–µ")
def other_option(message):
    user_states[message.chat.id] = 'message_question'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞—à–µ–ª –æ—à–∏–±–∫—É")
def report_problem(message):
    user_states[message.chat.id] = 'message_problem'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'message_problem')
def handle_user_problem(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        user_states[message.chat.id] = None
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_main_keyboard()
        )
        return
    
    if len(message.text) > 500:
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    username = message.from_user.username or message.from_user.first_name
    manager.save_user_message(message.chat.id, username, message.text, "problem")
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        reply_markup=create_main_keyboard()
    ) 
    
    markup = types.InlineKeyboardMarkup()
    answer = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer")
    markup.add(answer)
    
    admin_msg = f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç @{username} (ID: {message.chat.id}):\n\n{message.text}"
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)
    
    user_states[message.chat.id] = None

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'message_question')
def handle_user_question(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        user_states[message.chat.id] = None
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_questions_keyboard()
        )
        return
    
    if len(message.text) > 500:
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    username = message.from_user.username or message.from_user.first_name
    manager.save_user_message(message.chat.id, username, message.text, "question")
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        reply_markup=create_main_keyboard()
    )
    markup = types.InlineKeyboardMarkup()
    answer = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer")
    markup.add(answer)
    admin_msg = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {message.chat.id}):\n\n{message.text}"
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)
    
    user_states[message.chat.id] = None

@bot.callback_query_handler(func=lambda call: call.data == "answer")
def handle_answer_callback(call):
    admin_message_id = call.message.message_id
    user_message_text = call.message.text.split("\n\n")[-1]
    
    try:
        user_id = int(call.message.text.split("ID: ")[1].split(")")[0])
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    msg = bot.send_message(
        call.from_user.id, 
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):\n\n{user_message_text}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    bot.register_next_step_handler(msg, process_admin_reply, user_id, admin_message_id)

def process_admin_reply(message, user_id, admin_message_id):
    if message.text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω")
        return
    
    try:
        bot.send_message(
            user_id,
            f"üì® –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )
        return
    
    try:
        with sqlite3.connect(database) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE user_messages SET status = 'answered' WHERE id = ("
                "SELECT id FROM user_messages WHERE user_id = ? "
                "ORDER BY timestamp DESC LIMIT 1"
                ")",
                (user_id,)
            )
            conn.commit()
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        )
    
    try:
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=admin_message_id,
            text=f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n\n{message.text}"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"
        )
    
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_menu(message):
    user_states[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def answer_question(message):
    answer = manager.get_answer(message.text)
    if answer:
        bot.send_message(message.chat.id, answer)
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )

if __name__ == '__main__':
    bot.polling(none_stop=True)