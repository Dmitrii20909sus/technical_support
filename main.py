from telebot import TeleBot, types
from logic import DB_Manager
from config import *
import sqlite3

bot = TeleBot(token)
manager = DB_Manager(database)
ADMIN_ID = admin_id  
user_states = {}

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"))
    markup.add(types.KeyboardButton("–ù–∞—à–µ–ª –æ—à–∏–±–∫—É"))
    markup.add(types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    markup.add(types.KeyboardButton("–í—Å–µ –æ—Ç–∑—ã–≤—ã"))
    return markup

def create_questions_keyboard():
    questions = manager.get_all_questions()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for question in questions:
        markup.add(types.KeyboardButton(question))
    markup.add(types.KeyboardButton("–î—Ä—É–≥–æ–µ")) 
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    return markup

@bot.message_handler(commands=['start'])
def start_command(message):
    user_states[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è")
def show_questions(message):
    user_states[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–î—Ä—É–≥–æ–µ' –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=create_questions_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–î—Ä—É–≥–æ–µ")
def other_option(message):
    user_states[message.chat.id] = 'message_question'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞—à–µ–ª –æ—à–∏–±–∫—É")
def report_problem(message):
    user_states[message.chat.id] = 'message_problem'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
def _send_feedback(message):
    markup = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="yes")
    markup.add(yes)
    bot.send_message(
        message.chat.id, " –ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í—Å–µ –æ—Ç–∑—ã–≤—ã")
def show_feedbacks(message):
    
    feedbacks = manager.get_feedbacks()
    total = manager.get_feedback_count()

    if not feedbacks:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç—É –æ—Ç–∑—ã–≤–æ–≤")
        return
    
    avg_rating = manager.get_average_rating()
    response = format_feedbacks(feedbacks, 0, total, avg_rating=avg_rating)
    markup = create_pagination_markup(0, total)
    bot.send_message(message.chat.id, response, reply_markup=markup)

    
def format_feedbacks(feedbacks, offset, total, avg_rating=None):
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤\n"
    if avg_rating is not None:
        text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}/5\n\n"
    text += f"üìù –û—Ç–∑—ã–≤—ã ({offset+1}-{min(offset+len(feedbacks),total)} –∏–∑ {total}):\n\n"
    for fb in feedbacks:
        try:
            user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {'@' + fb[2] if fb[2] else '–ê–Ω–æ–Ω–∏–º'} \n"
            text += (
                user_info )
            text += (   f"‚≠ê –û—Ü–µ–Ω–∫–∞: {fb[4] if fb[4] is not None else '–•–∑'}/5\n")
            
            if fb[3] is not None:                             
              text += (  f"üìÑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {fb[3]}\n")
            text += (   
                f"üìÖ –î–∞—Ç–∞: {fb[5]}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                 )     
        except IndexError:
            text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞ (ID: {fb[0] if fb else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    return text

def create_pagination_markup(offset, total):
    markup = types.InlineKeyboardMarkup()
    if offset > 0:
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è Prev", callback_data=f"fb_prev_{offset}"))
    if offset + 5 < total:
        markup.add(types.InlineKeyboardButton("Next ‚ñ∂Ô∏è", callback_data=f"fb_next_{offset}"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith(('fb_prev_', 'fb_next_')))
def handle_pagination(call):
    if call.from_user.id != ADMIN_ID:
        return
    
    action, offset = call.data.split('_')[1], int(call.data.split('_')[2])
    new_offset = offset - 5 if action == 'prev' else offset + 5
    
    feedbacks = manager.get_feedbacks(new_offset)
    total = manager.get_feedback_count()
    
    if not feedbacks:
        return
    
    response = format_feedbacks(feedbacks, new_offset, total)
    markup = create_pagination_markup(new_offset, total)
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=response,
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'message_problem')
def handle_user_problem(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        user_states[message.chat.id] = None
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_main_keyboard()
        )
        return
    
    if len(message.text) > 500:
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    username = message.from_user.username or message.from_user.first_name
    manager.save_user_message(message.chat.id, username, message.text, "problem")
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        reply_markup=create_main_keyboard()
    ) 
    
    markup = types.InlineKeyboardMarkup()
    answer = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer")
    markup.add(answer)
    
    admin_msg = f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç @{username} (ID: {message.chat.id}):\n\n{message.text}"
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)
    
    user_states[message.chat.id] = None

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'message_question')
def handle_user_question(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        user_states[message.chat.id] = None
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_questions_keyboard()
        )
        return
    
    if len(message.text) > 500:
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    username = message.from_user.username or message.from_user.first_name
    manager.save_user_message(message.chat.id, username, message.text, "question")
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        reply_markup=create_main_keyboard()
    )
    markup = types.InlineKeyboardMarkup()
    answer = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer")
    markup.add(answer)
    admin_msg = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {message.chat.id}):\n\n{message.text}"
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=markup)
    
    user_states[message.chat.id] = None

@bot.callback_query_handler(func=lambda call: call.data == "answer")
def handle_answer_callback(call):
    admin_message_id = call.message.message_id
    user_message_text = call.message.text.split("\n\n")[-1]
    
    try:
        user_id = int(call.message.text.split("ID: ")[1].split(")")[0])
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    msg = bot.send_message(
        call.from_user.id, 
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):\n\n{user_message_text}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    bot.register_next_step_handler(msg, process_admin_reply, user_id, admin_message_id)

def process_admin_reply(message, user_id, admin_message_id):
    if message.text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω")
        return
    
    try:
        bot.send_message(
            user_id,
            f"üì® –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        markup = types.InlineKeyboardMarkup()
        yes = types.InlineKeyboardButton("–î–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="yes")
        no = types.InlineKeyboardButton("–ù–µ—Ç, —Å–≤—è–∑–∞—Ç—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", callback_data="no")
        markup.add(yes, no)
        bot.send_message(user_id, "–í–∞–º –ø–æ–º–æ–≥–ª–∞ –¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=markup)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )
        return
    
    try:
        with sqlite3.connect(database) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE user_messages SET status = 'answered' WHERE id = ("
                "SELECT id FROM user_messages WHERE user_id = ? "
                "ORDER BY timestamp DESC LIMIT 1"
                ")",
                (user_id,)
            )
            conn.commit()
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        )
    
    try:
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=admin_message_id,
            text=f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n\n{message.text}"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"
        )
    
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_menu(message):
    user_states[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def answer_question(message):
    user_id = message.chat.id
    answer = manager.get_answer(message.text)
    if answer:
        markup = types.InlineKeyboardMarkup()
        yes = types.InlineKeyboardButton("–î–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="yes")
        no = types.InlineKeyboardButton("–ù–µ—Ç, —Å–≤—è–∑–∞—Ç—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", callback_data="no")
        markup.add(yes, no)
        bot.send_message(user_id, answer)
        bot.send_message(user_id, "–í–∞–º –ø–æ–º–æ–≥–ª–∞ –¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=markup)
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )



@bot.callback_query_handler(func=lambda call: call.data == "yes")
def handle_yes(call):
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup.add(
        types.InlineKeyboardButton("1", callback_data="feedback_1"),
        types.InlineKeyboardButton("2", callback_data="feedback_2"),
        types.InlineKeyboardButton("3", callback_data="feedback_3"),
        types.InlineKeyboardButton("4", callback_data="feedback_4"),
        types.InlineKeyboardButton("5", callback_data="feedback_5")
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–û—Ü–µ–Ω–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –æ—Ç 1 –¥–æ 5 (5 - –æ—Ç–ª–∏—á–Ω–æ):",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("feedback_"))
def process_feedback_rating(call):
    rating = int(call.data.split("_")[1])
    

    user_states[call.from_user.id] = {"rating": rating}
    
   
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="leave_comment"),
        types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating}/5. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "leave_comment")
def ask_for_comment(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
    )
    
   
    bot.register_next_step_handler_by_chat_id(
        call.message.chat.id, 
        save_feedback_with_comment,
        call.from_user.id
    )

@bot.callback_query_handler(func=lambda call: call.data == "skip_comment")
def skip_comment(call):
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.first_name

    manager.save_feedback(
        user_id=user_id,
        username=username,
        message=None,
        estimation=user_states[user_id]["rating"]
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {user_states[user_id]['rating']}/5!",
    )
    
 
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )
def save_feedback_with_comment(message, user_id):
    username = message.from_user.username or message.from_user.first_name
    
    success = manager.save_feedback(
        user_id=user_id,
        username=username,
        message=message.text,
        estimation=user_states[user_id]["rating"]
    )
    
    if success:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ {user_states[user_id]['rating']}/5! "
            "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
            reply_markup=create_main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞",
            reply_markup=create_main_keyboard()
        )
@bot.callback_query_handler(func=lambda call: call.data == "no")
def handle_no(call):
    bot.answer_callback_query(call.id)
    bot.send_message(
        call.message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=types.ForceReply(selective=True)
    )
    user_states[call.message.chat.id] = "message_question"



if __name__ == '__main__':
    bot.polling(none_stop=True)